{"version":3,"sources":["webpack:///./src/app/ms-back-office/modules/ms-brands/services/brands-resolve.service.ts","webpack:///./src/app/ms-back-office/modules/ms-brands/services/brands.service.ts","webpack:///./src/app/ms-back-office/modules/ms-users/services/users.service.ts","webpack:///./src/app/routing/services/id-resolve.service.ts"],"names":[],"mappings":"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","file":"default~home-home-module~ms-tasks-ms-tasks-module~ms-users-ms-users-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\n//\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n//\r\nimport { ErrorHandlingService } from '../../../../error-handling/services/error-handling.service';\r\nimport { BrandsService } from './brands.service';\r\n//import { setTranslations } from '@c/ngx-translate';\r\n\r\nconst errorKey = 'Error';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class BrandsResolveService implements Resolve<any> {\r\n    constructor(\r\n        private brandsService: BrandsService,\r\n        private translate: TranslateService,\r\n        private errorHandlingService: ErrorHandlingService) {\r\n        //setTranslations(this.translate, TRANSLATIONS);\r\n    }\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n        return this.brandsService.getAllBrands().pipe(\r\n            map(brands => brands),\r\n            catchError((err) => {\r\n                this.errorHandlingService.handleUiError(errorKey, err);\r\n                return of(null);\r\n            }));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ErrorHandlingHttpService } from '../../../../error-handling/services/error-handling-http.service';\r\n//\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n//\r\nimport { ConfigService } from '../../../../config/services/config.service';\r\nimport { Brand } from '../models/brand';\r\nimport { BrandsListResponse, BrandResponse } from '../models/brand';\r\n\r\nexport const ASCENDING = 'asc';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BrandsService {\r\n\r\n    apiEndpoint: string;\r\n\r\n    previousFilter: any = {};\r\n\r\n    previousSortColumn: string = 'name';\r\n\r\n    previousSortDirection: string = 'asc';\r\n\r\n    previousPageIndex: number = 0;\r\n\r\n    previousPageSize: number = 10;\r\n\r\n    public brandsList = new BehaviorSubject<BrandsListResponse>({ dataCount: 0, data: [] });\r\n\r\n    constructor(\r\n        private configService: ConfigService,\r\n        private http: ErrorHandlingHttpService) {\r\n            this.apiEndpoint = this.configService.config.apiConfigs.brands.apiEndpoint;\r\n    }\r\n\r\n    //\r\n    // Begin functions that most services have.\r\n    //\r\n\r\n    getBrands(filter: any, sortColumn: string, sortDirection: string, pageIndex: number, pageSize: number): Observable<BrandsListResponse> {\r\n        this.previousFilter = filter;\r\n        this.previousSortColumn = sortColumn;\r\n        this.previousSortDirection = sortDirection;\r\n        this.previousPageIndex = pageIndex;\r\n        this.previousPageSize = pageSize;\r\n\r\n        let queryParams = this.formatQueryParams(\r\n            filter,\r\n            sortColumn, sortDirection,\r\n            pageIndex, pageSize);\r\n\r\n        return this.http.get<BrandsListResponse>(this.apiEndpoint + queryParams);\r\n    }\r\n\r\n    //\r\n    // Call this function to repeat the previous query, after deleting\r\n    // a brand for example.\r\n    //\r\n\r\n    reloadBrands(): Observable<BrandsListResponse> {\r\n        return this.getBrands(\r\n            this.previousFilter,\r\n            this.previousSortColumn, this.previousSortDirection,\r\n            this.previousPageIndex, this.previousPageSize);\r\n    }\r\n\r\n    postBrand(data: Brand): Observable<Brand> {\r\n        return this.http.post<Brand>(this.apiEndpoint, JSON.stringify(data));\r\n    }\r\n\r\n    getBrand(id: string): Observable<BrandResponse> {\r\n        return this.http.get<BrandResponse>(this.apiEndpoint + id + '/');\r\n    }\r\n\r\n    postBrandLinkedShops(id: string, data: Array<string>): Observable<Brand> {\r\n        return this.http.post<Brand>(this.apiEndpoint + id + '/shops/', JSON.stringify(data));\r\n    }\r\n\r\n    getBrandLinkedShops(id: string): Observable<any> {\r\n        return this.http.get<any>(this.apiEndpoint + id + '/shops/');\r\n    }\r\n\r\n    putBrand(data: Brand): Observable<Brand> {\r\n        return this.http.put<Brand>(this.apiEndpoint + data.id + '/', JSON.stringify(data));\r\n    }\r\n\r\n    deleteBrand(id: string): Observable<any> {\r\n        return this.http.delete<any>(this.apiEndpoint + id + '/');\r\n    }\r\n\r\n    formatQueryParams(filter?: any, sortColumn?: string, sortDirection?: string, pageIndex?: number, pageSize?: number): string {\r\n        let queryParams = '';\r\n\r\n        if (filter.name && filter.name.length > 0) {\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `name=${filter.name}`;\r\n        }\r\n\r\n        /*if (filter.collection && filter.collection.length > 0) {\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `collection=${filter.collection}`;\r\n        }*/\r\n\r\n        if (sortColumn) {\r\n            let ordering = '';\r\n\r\n            if (sortDirection === 'desc') {\r\n                ordering = '-';\r\n            }\r\n            ordering += sortColumn;\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `ordering=${ordering}`;\r\n        }\r\n\r\n        if (pageIndex !== undefined) {\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `offset=${pageIndex * pageSize}`;\r\n        }\r\n\r\n        if (pageSize !== undefined) {\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `limit=${pageSize}`;\r\n        }\r\n\r\n        return queryParams;\r\n    }\r\n\r\n    //\r\n    // End functions that most services have.\r\n    //\r\n\r\n    //\r\n    // Begin special functions specific to only this service.\r\n    //\r\n\r\n    getAllBrands(): Observable<Brand[]> {\r\n        return this.http.get<{ data: Brand[] }>(this.apiEndpoint)\r\n            .pipe(map(response => {\r\n                return response.data;\r\n            }));\r\n    }\r\n\r\n    //\r\n    // End special functions specific to only this service.\r\n    //\r\n\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { ErrorHandlingHttpService } from '../../../../error-handling/services/error-handling-http.service';\r\n//\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n//\r\nimport { ConfigService } from '../../../../config/services/config.service';\r\nimport { User, UsersListResponse, UsersResponse } from '../models/users';\r\n\r\nexport const ASCENDING = 'asc';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n\r\n    apiEndpoint: string;\r\n\r\n    previousFilter: any = {};\r\n\r\n    previousSortColumn: string = 'firstName';\r\n\r\n    previousSortDirection: string = 'asc';\r\n\r\n    previousPageIndex: number = 0;\r\n\r\n    previousPageSize: number = 10;\r\n\r\n    public usersList = new BehaviorSubject<UsersListResponse>({ dataCount: 0, data: [] });\r\n\r\n    constructor(\r\n        private configService: ConfigService,\r\n        private http: ErrorHandlingHttpService) {\r\n        this.apiEndpoint = this.configService.config.apiConfigs.users.apiEndpoint;\r\n    }\r\n\r\n    //\r\n    // Begin functions that most services have.\r\n    //\r\n\r\n    getUsers(filter: any, sortColumn: string, sortDirection: string, pageIndex: number, pageSize: number): Observable<UsersListResponse> {\r\n        this.previousFilter = filter;\r\n        this.previousSortColumn = sortColumn;\r\n        this.previousSortDirection = sortDirection;\r\n        this.previousPageIndex = pageIndex;\r\n        this.previousPageSize = pageSize;\r\n\r\n        let queryParams = this.formatQueryParams(\r\n            filter,\r\n            sortColumn, sortDirection,\r\n            pageIndex, pageSize);\r\n\r\n        return this.http.get<UsersListResponse>(this.apiEndpoint + queryParams);\r\n    }\r\n\r\n    //\r\n    // Call this function to repeat the previous query, after deleting\r\n    // a brand for example.\r\n    //\r\n\r\n    reloadUsers(): Observable<UsersListResponse> {\r\n        return this.getUsers(\r\n            this.previousFilter,\r\n            this.previousSortColumn, this.previousSortDirection,\r\n            this.previousPageIndex, this.previousPageSize);\r\n    }\r\n\r\n    postUser(data: User): Observable<User> {\r\n        return this.http.post<User>(this.apiEndpoint, JSON.stringify(data));\r\n    }\r\n\r\n    getUser(id: string): Observable<UsersResponse> {\r\n        return this.http.get<UsersResponse>(this.apiEndpoint + id + '/');\r\n    }\r\n\r\n    patchUser(data: User): Observable<User> {\r\n        return this.http.patch<User>(this.apiEndpoint + data.id + '/', JSON.stringify(data));\r\n    }\r\n\r\n    deleteUser(id: string): Observable<any> {\r\n        return this.http.delete<any>(this.apiEndpoint + id + '/');\r\n    }\r\n\r\n    formatQueryParams(filter?: any, sortColumn?: string, sortDirection?: string, pageIndex?: number, pageSize?: number): string {\r\n        let queryParams = '';\r\n\r\n        if (filter.search && filter.search.length > 0) {\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `search=${filter.search}`;\r\n        }\r\n\r\n        if (sortColumn) {\r\n            let ordering = '';\r\n\r\n            if (sortDirection === 'desc') {\r\n                ordering = '-';\r\n            }\r\n            ordering += sortColumn;\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `ordering=${ordering}`;\r\n        }\r\n\r\n        if (pageIndex !== undefined) {\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `offset=${pageIndex * pageSize}`;\r\n        }\r\n\r\n        if (pageSize !== undefined) {\r\n            queryParams += queryParams.length > 0 ? '&' : '?';\r\n            queryParams += `limit=${pageSize}`;\r\n        }\r\n\r\n        return queryParams;\r\n    }\r\n\r\n    //\r\n    // End functions that most services have.\r\n    //\r\n\r\n    //\r\n    // Begin special functions specific to only this service.\r\n    //\r\n\r\n    getAllUsers(): Observable<User[]> {\r\n        return this.http.get<{ data: User[] }>(this.apiEndpoint)\r\n            .pipe(map(response => {\r\n                return response.data;\r\n            }));\r\n    }\r\n\r\n    //\r\n    // End special functions specific to only this service.\r\n    //\r\n\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class IdResolveService implements Resolve<string> {\r\n    resolve(route: ActivatedRouteSnapshot): Observable<any>|Promise<any>|any {        \r\n        return of(route.paramMap.get('id'));\r\n    }\r\n}\r\n"],"sourceRoot":""}